// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Namecard is an object representing the database table.
type Namecard struct {
	StudentPrefix string      `boil:"student_prefix" json:"student_prefix" toml:"student_prefix" yaml:"student_prefix"`
	Color         null.String `boil:"color" json:"color,omitempty" toml:"color" yaml:"color,omitempty"`

	R *namecardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L namecardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NamecardColumns = struct {
	StudentPrefix string
	Color         string
}{
	StudentPrefix: "student_prefix",
	Color:         "color",
}

var NamecardTableColumns = struct {
	StudentPrefix string
	Color         string
}{
	StudentPrefix: "namecards.student_prefix",
	Color:         "namecards.color",
}

// Generated where

var NamecardWhere = struct {
	StudentPrefix whereHelperstring
	Color         whereHelpernull_String
}{
	StudentPrefix: whereHelperstring{field: "`namecards`.`student_prefix`"},
	Color:         whereHelpernull_String{field: "`namecards`.`color`"},
}

// NamecardRels is where relationship names are stored.
var NamecardRels = struct {
}{}

// namecardR is where relationships are stored.
type namecardR struct {
}

// NewStruct creates a new relationship struct
func (*namecardR) NewStruct() *namecardR {
	return &namecardR{}
}

// namecardL is where Load methods for each relationship are stored.
type namecardL struct{}

var (
	namecardAllColumns            = []string{"student_prefix", "color"}
	namecardColumnsWithoutDefault = []string{"student_prefix", "color"}
	namecardColumnsWithDefault    = []string{}
	namecardPrimaryKeyColumns     = []string{"student_prefix"}
	namecardGeneratedColumns      = []string{}
)

type (
	// NamecardSlice is an alias for a slice of pointers to Namecard.
	// This should almost always be used instead of []Namecard.
	NamecardSlice []*Namecard
	// NamecardHook is the signature for custom Namecard hook methods
	NamecardHook func(context.Context, boil.ContextExecutor, *Namecard) error

	namecardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	namecardType                 = reflect.TypeOf(&Namecard{})
	namecardMapping              = queries.MakeStructMapping(namecardType)
	namecardPrimaryKeyMapping, _ = queries.BindMapping(namecardType, namecardMapping, namecardPrimaryKeyColumns)
	namecardInsertCacheMut       sync.RWMutex
	namecardInsertCache          = make(map[string]insertCache)
	namecardUpdateCacheMut       sync.RWMutex
	namecardUpdateCache          = make(map[string]updateCache)
	namecardUpsertCacheMut       sync.RWMutex
	namecardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var namecardAfterSelectMu sync.Mutex
var namecardAfterSelectHooks []NamecardHook

var namecardBeforeInsertMu sync.Mutex
var namecardBeforeInsertHooks []NamecardHook
var namecardAfterInsertMu sync.Mutex
var namecardAfterInsertHooks []NamecardHook

var namecardBeforeUpdateMu sync.Mutex
var namecardBeforeUpdateHooks []NamecardHook
var namecardAfterUpdateMu sync.Mutex
var namecardAfterUpdateHooks []NamecardHook

var namecardBeforeDeleteMu sync.Mutex
var namecardBeforeDeleteHooks []NamecardHook
var namecardAfterDeleteMu sync.Mutex
var namecardAfterDeleteHooks []NamecardHook

var namecardBeforeUpsertMu sync.Mutex
var namecardBeforeUpsertHooks []NamecardHook
var namecardAfterUpsertMu sync.Mutex
var namecardAfterUpsertHooks []NamecardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Namecard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Namecard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Namecard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Namecard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Namecard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Namecard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Namecard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Namecard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Namecard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range namecardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNamecardHook registers your hook function for all future operations.
func AddNamecardHook(hookPoint boil.HookPoint, namecardHook NamecardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		namecardAfterSelectMu.Lock()
		namecardAfterSelectHooks = append(namecardAfterSelectHooks, namecardHook)
		namecardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		namecardBeforeInsertMu.Lock()
		namecardBeforeInsertHooks = append(namecardBeforeInsertHooks, namecardHook)
		namecardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		namecardAfterInsertMu.Lock()
		namecardAfterInsertHooks = append(namecardAfterInsertHooks, namecardHook)
		namecardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		namecardBeforeUpdateMu.Lock()
		namecardBeforeUpdateHooks = append(namecardBeforeUpdateHooks, namecardHook)
		namecardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		namecardAfterUpdateMu.Lock()
		namecardAfterUpdateHooks = append(namecardAfterUpdateHooks, namecardHook)
		namecardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		namecardBeforeDeleteMu.Lock()
		namecardBeforeDeleteHooks = append(namecardBeforeDeleteHooks, namecardHook)
		namecardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		namecardAfterDeleteMu.Lock()
		namecardAfterDeleteHooks = append(namecardAfterDeleteHooks, namecardHook)
		namecardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		namecardBeforeUpsertMu.Lock()
		namecardBeforeUpsertHooks = append(namecardBeforeUpsertHooks, namecardHook)
		namecardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		namecardAfterUpsertMu.Lock()
		namecardAfterUpsertHooks = append(namecardAfterUpsertHooks, namecardHook)
		namecardAfterUpsertMu.Unlock()
	}
}

// One returns a single namecard record from the query.
func (q namecardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Namecard, error) {
	o := &Namecard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for namecards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Namecard records from the query.
func (q namecardQuery) All(ctx context.Context, exec boil.ContextExecutor) (NamecardSlice, error) {
	var o []*Namecard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Namecard slice")
	}

	if len(namecardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Namecard records in the query.
func (q namecardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count namecards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q namecardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if namecards exists")
	}

	return count > 0, nil
}

// Namecards retrieves all the records using an executor.
func Namecards(mods ...qm.QueryMod) namecardQuery {
	mods = append(mods, qm.From("`namecards`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`namecards`.*"})
	}

	return namecardQuery{q}
}

// FindNamecard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNamecard(ctx context.Context, exec boil.ContextExecutor, studentPrefix string, selectCols ...string) (*Namecard, error) {
	namecardObj := &Namecard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `namecards` where `student_prefix`=?", sel,
	)

	q := queries.Raw(query, studentPrefix)

	err := q.Bind(ctx, exec, namecardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from namecards")
	}

	if err = namecardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return namecardObj, err
	}

	return namecardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Namecard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no namecards provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(namecardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	namecardInsertCacheMut.RLock()
	cache, cached := namecardInsertCache[key]
	namecardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			namecardAllColumns,
			namecardColumnsWithDefault,
			namecardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(namecardType, namecardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(namecardType, namecardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `namecards` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `namecards` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `namecards` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, namecardPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into namecards")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StudentPrefix,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for namecards")
	}

CacheNoHooks:
	if !cached {
		namecardInsertCacheMut.Lock()
		namecardInsertCache[key] = cache
		namecardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Namecard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Namecard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	namecardUpdateCacheMut.RLock()
	cache, cached := namecardUpdateCache[key]
	namecardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			namecardAllColumns,
			namecardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update namecards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `namecards` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, namecardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(namecardType, namecardMapping, append(wl, namecardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update namecards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for namecards")
	}

	if !cached {
		namecardUpdateCacheMut.Lock()
		namecardUpdateCache[key] = cache
		namecardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q namecardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for namecards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for namecards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NamecardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), namecardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `namecards` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, namecardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in namecard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all namecard")
	}
	return rowsAff, nil
}

var mySQLNamecardUniqueColumns = []string{
	"student_prefix",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Namecard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no namecards provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(namecardColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNamecardUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	namecardUpsertCacheMut.RLock()
	cache, cached := namecardUpsertCache[key]
	namecardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			namecardAllColumns,
			namecardColumnsWithDefault,
			namecardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			namecardAllColumns,
			namecardPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert namecards, could not build update column list")
		}

		ret := strmangle.SetComplement(namecardAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`namecards`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `namecards` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(namecardType, namecardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(namecardType, namecardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for namecards")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(namecardType, namecardMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for namecards")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for namecards")
	}

CacheNoHooks:
	if !cached {
		namecardUpsertCacheMut.Lock()
		namecardUpsertCache[key] = cache
		namecardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Namecard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Namecard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Namecard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), namecardPrimaryKeyMapping)
	sql := "DELETE FROM `namecards` WHERE `student_prefix`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from namecards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for namecards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q namecardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no namecardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from namecards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for namecards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NamecardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(namecardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), namecardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `namecards` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, namecardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from namecard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for namecards")
	}

	if len(namecardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Namecard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNamecard(ctx, exec, o.StudentPrefix)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NamecardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NamecardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), namecardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `namecards`.* FROM `namecards` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, namecardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NamecardSlice")
	}

	*o = slice

	return nil
}

// NamecardExists checks if the Namecard row exists.
func NamecardExists(ctx context.Context, exec boil.ContextExecutor, studentPrefix string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `namecards` where `student_prefix`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, studentPrefix)
	}
	row := exec.QueryRowContext(ctx, sql, studentPrefix)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if namecards exists")
	}

	return exists, nil
}

// Exists checks if the Namecard row exists.
func (o *Namecard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NamecardExists(ctx, exec, o.StudentPrefix)
}
