// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClientRedirectURL is an object representing the database table.
type ClientRedirectURL struct {
	ClientID string `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	URL      string `boil:"url" json:"url" toml:"url" yaml:"url"`

	R *clientRedirectURLR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clientRedirectURLL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClientRedirectURLColumns = struct {
	ClientID string
	URL      string
}{
	ClientID: "client_id",
	URL:      "url",
}

var ClientRedirectURLTableColumns = struct {
	ClientID string
	URL      string
}{
	ClientID: "client_redirect_urls.client_id",
	URL:      "client_redirect_urls.url",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ClientRedirectURLWhere = struct {
	ClientID whereHelperstring
	URL      whereHelperstring
}{
	ClientID: whereHelperstring{field: "`client_redirect_urls`.`client_id`"},
	URL:      whereHelperstring{field: "`client_redirect_urls`.`url`"},
}

// ClientRedirectURLRels is where relationship names are stored.
var ClientRedirectURLRels = struct {
}{}

// clientRedirectURLR is where relationships are stored.
type clientRedirectURLR struct {
}

// NewStruct creates a new relationship struct
func (*clientRedirectURLR) NewStruct() *clientRedirectURLR {
	return &clientRedirectURLR{}
}

// clientRedirectURLL is where Load methods for each relationship are stored.
type clientRedirectURLL struct{}

var (
	clientRedirectURLAllColumns            = []string{"client_id", "url"}
	clientRedirectURLColumnsWithoutDefault = []string{"client_id", "url"}
	clientRedirectURLColumnsWithDefault    = []string{}
	clientRedirectURLPrimaryKeyColumns     = []string{"client_id", "url"}
	clientRedirectURLGeneratedColumns      = []string{}
)

type (
	// ClientRedirectURLSlice is an alias for a slice of pointers to ClientRedirectURL.
	// This should almost always be used instead of []ClientRedirectURL.
	ClientRedirectURLSlice []*ClientRedirectURL
	// ClientRedirectURLHook is the signature for custom ClientRedirectURL hook methods
	ClientRedirectURLHook func(context.Context, boil.ContextExecutor, *ClientRedirectURL) error

	clientRedirectURLQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clientRedirectURLType                 = reflect.TypeOf(&ClientRedirectURL{})
	clientRedirectURLMapping              = queries.MakeStructMapping(clientRedirectURLType)
	clientRedirectURLPrimaryKeyMapping, _ = queries.BindMapping(clientRedirectURLType, clientRedirectURLMapping, clientRedirectURLPrimaryKeyColumns)
	clientRedirectURLInsertCacheMut       sync.RWMutex
	clientRedirectURLInsertCache          = make(map[string]insertCache)
	clientRedirectURLUpdateCacheMut       sync.RWMutex
	clientRedirectURLUpdateCache          = make(map[string]updateCache)
	clientRedirectURLUpsertCacheMut       sync.RWMutex
	clientRedirectURLUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clientRedirectURLAfterSelectMu sync.Mutex
var clientRedirectURLAfterSelectHooks []ClientRedirectURLHook

var clientRedirectURLBeforeInsertMu sync.Mutex
var clientRedirectURLBeforeInsertHooks []ClientRedirectURLHook
var clientRedirectURLAfterInsertMu sync.Mutex
var clientRedirectURLAfterInsertHooks []ClientRedirectURLHook

var clientRedirectURLBeforeUpdateMu sync.Mutex
var clientRedirectURLBeforeUpdateHooks []ClientRedirectURLHook
var clientRedirectURLAfterUpdateMu sync.Mutex
var clientRedirectURLAfterUpdateHooks []ClientRedirectURLHook

var clientRedirectURLBeforeDeleteMu sync.Mutex
var clientRedirectURLBeforeDeleteHooks []ClientRedirectURLHook
var clientRedirectURLAfterDeleteMu sync.Mutex
var clientRedirectURLAfterDeleteHooks []ClientRedirectURLHook

var clientRedirectURLBeforeUpsertMu sync.Mutex
var clientRedirectURLBeforeUpsertHooks []ClientRedirectURLHook
var clientRedirectURLAfterUpsertMu sync.Mutex
var clientRedirectURLAfterUpsertHooks []ClientRedirectURLHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClientRedirectURL) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClientRedirectURL) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClientRedirectURL) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClientRedirectURL) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClientRedirectURL) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClientRedirectURL) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClientRedirectURL) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClientRedirectURL) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClientRedirectURL) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRedirectURLAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClientRedirectURLHook registers your hook function for all future operations.
func AddClientRedirectURLHook(hookPoint boil.HookPoint, clientRedirectURLHook ClientRedirectURLHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		clientRedirectURLAfterSelectMu.Lock()
		clientRedirectURLAfterSelectHooks = append(clientRedirectURLAfterSelectHooks, clientRedirectURLHook)
		clientRedirectURLAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		clientRedirectURLBeforeInsertMu.Lock()
		clientRedirectURLBeforeInsertHooks = append(clientRedirectURLBeforeInsertHooks, clientRedirectURLHook)
		clientRedirectURLBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		clientRedirectURLAfterInsertMu.Lock()
		clientRedirectURLAfterInsertHooks = append(clientRedirectURLAfterInsertHooks, clientRedirectURLHook)
		clientRedirectURLAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		clientRedirectURLBeforeUpdateMu.Lock()
		clientRedirectURLBeforeUpdateHooks = append(clientRedirectURLBeforeUpdateHooks, clientRedirectURLHook)
		clientRedirectURLBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		clientRedirectURLAfterUpdateMu.Lock()
		clientRedirectURLAfterUpdateHooks = append(clientRedirectURLAfterUpdateHooks, clientRedirectURLHook)
		clientRedirectURLAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		clientRedirectURLBeforeDeleteMu.Lock()
		clientRedirectURLBeforeDeleteHooks = append(clientRedirectURLBeforeDeleteHooks, clientRedirectURLHook)
		clientRedirectURLBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		clientRedirectURLAfterDeleteMu.Lock()
		clientRedirectURLAfterDeleteHooks = append(clientRedirectURLAfterDeleteHooks, clientRedirectURLHook)
		clientRedirectURLAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		clientRedirectURLBeforeUpsertMu.Lock()
		clientRedirectURLBeforeUpsertHooks = append(clientRedirectURLBeforeUpsertHooks, clientRedirectURLHook)
		clientRedirectURLBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		clientRedirectURLAfterUpsertMu.Lock()
		clientRedirectURLAfterUpsertHooks = append(clientRedirectURLAfterUpsertHooks, clientRedirectURLHook)
		clientRedirectURLAfterUpsertMu.Unlock()
	}
}

// One returns a single clientRedirectURL record from the query.
func (q clientRedirectURLQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClientRedirectURL, error) {
	o := &ClientRedirectURL{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for client_redirect_urls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClientRedirectURL records from the query.
func (q clientRedirectURLQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClientRedirectURLSlice, error) {
	var o []*ClientRedirectURL

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClientRedirectURL slice")
	}

	if len(clientRedirectURLAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClientRedirectURL records in the query.
func (q clientRedirectURLQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count client_redirect_urls rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clientRedirectURLQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if client_redirect_urls exists")
	}

	return count > 0, nil
}

// ClientRedirectUrls retrieves all the records using an executor.
func ClientRedirectUrls(mods ...qm.QueryMod) clientRedirectURLQuery {
	mods = append(mods, qm.From("`client_redirect_urls`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`client_redirect_urls`.*"})
	}

	return clientRedirectURLQuery{q}
}

// FindClientRedirectURL retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClientRedirectURL(ctx context.Context, exec boil.ContextExecutor, clientID string, uRL string, selectCols ...string) (*ClientRedirectURL, error) {
	clientRedirectURLObj := &ClientRedirectURL{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `client_redirect_urls` where `client_id`=? AND `url`=?", sel,
	)

	q := queries.Raw(query, clientID, uRL)

	err := q.Bind(ctx, exec, clientRedirectURLObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from client_redirect_urls")
	}

	if err = clientRedirectURLObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clientRedirectURLObj, err
	}

	return clientRedirectURLObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClientRedirectURL) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_redirect_urls provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientRedirectURLColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clientRedirectURLInsertCacheMut.RLock()
	cache, cached := clientRedirectURLInsertCache[key]
	clientRedirectURLInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clientRedirectURLAllColumns,
			clientRedirectURLColumnsWithDefault,
			clientRedirectURLColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clientRedirectURLType, clientRedirectURLMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clientRedirectURLType, clientRedirectURLMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `client_redirect_urls` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `client_redirect_urls` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `client_redirect_urls` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clientRedirectURLPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into client_redirect_urls")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ClientID,
		o.URL,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for client_redirect_urls")
	}

CacheNoHooks:
	if !cached {
		clientRedirectURLInsertCacheMut.Lock()
		clientRedirectURLInsertCache[key] = cache
		clientRedirectURLInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClientRedirectURL.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClientRedirectURL) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clientRedirectURLUpdateCacheMut.RLock()
	cache, cached := clientRedirectURLUpdateCache[key]
	clientRedirectURLUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clientRedirectURLAllColumns,
			clientRedirectURLPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update client_redirect_urls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `client_redirect_urls` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clientRedirectURLPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clientRedirectURLType, clientRedirectURLMapping, append(wl, clientRedirectURLPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update client_redirect_urls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for client_redirect_urls")
	}

	if !cached {
		clientRedirectURLUpdateCacheMut.Lock()
		clientRedirectURLUpdateCache[key] = cache
		clientRedirectURLUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clientRedirectURLQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for client_redirect_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for client_redirect_urls")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClientRedirectURLSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientRedirectURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `client_redirect_urls` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientRedirectURLPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clientRedirectURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clientRedirectURL")
	}
	return rowsAff, nil
}

var mySQLClientRedirectURLUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClientRedirectURL) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_redirect_urls provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientRedirectURLColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClientRedirectURLUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clientRedirectURLUpsertCacheMut.RLock()
	cache, cached := clientRedirectURLUpsertCache[key]
	clientRedirectURLUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			clientRedirectURLAllColumns,
			clientRedirectURLColumnsWithDefault,
			clientRedirectURLColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			clientRedirectURLAllColumns,
			clientRedirectURLPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert client_redirect_urls, could not build update column list")
		}

		ret := strmangle.SetComplement(clientRedirectURLAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`client_redirect_urls`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `client_redirect_urls` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clientRedirectURLType, clientRedirectURLMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clientRedirectURLType, clientRedirectURLMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for client_redirect_urls")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clientRedirectURLType, clientRedirectURLMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for client_redirect_urls")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for client_redirect_urls")
	}

CacheNoHooks:
	if !cached {
		clientRedirectURLUpsertCacheMut.Lock()
		clientRedirectURLUpsertCache[key] = cache
		clientRedirectURLUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClientRedirectURL record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClientRedirectURL) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClientRedirectURL provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clientRedirectURLPrimaryKeyMapping)
	sql := "DELETE FROM `client_redirect_urls` WHERE `client_id`=? AND `url`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from client_redirect_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for client_redirect_urls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clientRedirectURLQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clientRedirectURLQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from client_redirect_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_redirect_urls")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClientRedirectURLSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clientRedirectURLBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientRedirectURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `client_redirect_urls` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientRedirectURLPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clientRedirectURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_redirect_urls")
	}

	if len(clientRedirectURLAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClientRedirectURL) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClientRedirectURL(ctx, exec, o.ClientID, o.URL)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientRedirectURLSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClientRedirectURLSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientRedirectURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `client_redirect_urls`.* FROM `client_redirect_urls` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientRedirectURLPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClientRedirectURLSlice")
	}

	*o = slice

	return nil
}

// ClientRedirectURLExists checks if the ClientRedirectURL row exists.
func ClientRedirectURLExists(ctx context.Context, exec boil.ContextExecutor, clientID string, uRL string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `client_redirect_urls` where `client_id`=? AND `url`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, clientID, uRL)
	}
	row := exec.QueryRowContext(ctx, sql, clientID, uRL)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if client_redirect_urls exists")
	}

	return exists, nil
}

// Exists checks if the ClientRedirectURL row exists.
func (o *ClientRedirectURL) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ClientRedirectURLExists(ctx, exec, o.ClientID, o.URL)
}
