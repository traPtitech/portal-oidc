// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrls)
	t.Run("Clients", testClients)
	t.Run("Invitations", testInvitations)
	t.Run("MailLogs", testMailLogs)
	t.Run("Mails", testMails)
	t.Run("Namecards", testNamecards)
	t.Run("Privileges", testPrivileges)
	t.Run("Roles", testRoles)
	t.Run("RolesPrivileges", testRolesPrivileges)
	t.Run("RolesUsers", testRolesUsers)
	t.Run("Scopes", testScopes)
	t.Run("Tokens", testTokens)
	t.Run("TokensScopes", testTokensScopes)
	t.Run("UserLinks", testUserLinks)
	t.Run("UserStatuses", testUserStatuses)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsDelete)
	t.Run("Clients", testClientsDelete)
	t.Run("Invitations", testInvitationsDelete)
	t.Run("MailLogs", testMailLogsDelete)
	t.Run("Mails", testMailsDelete)
	t.Run("Namecards", testNamecardsDelete)
	t.Run("Privileges", testPrivilegesDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("RolesPrivileges", testRolesPrivilegesDelete)
	t.Run("RolesUsers", testRolesUsersDelete)
	t.Run("Scopes", testScopesDelete)
	t.Run("Tokens", testTokensDelete)
	t.Run("TokensScopes", testTokensScopesDelete)
	t.Run("UserLinks", testUserLinksDelete)
	t.Run("UserStatuses", testUserStatusesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsQueryDeleteAll)
	t.Run("Clients", testClientsQueryDeleteAll)
	t.Run("Invitations", testInvitationsQueryDeleteAll)
	t.Run("MailLogs", testMailLogsQueryDeleteAll)
	t.Run("Mails", testMailsQueryDeleteAll)
	t.Run("Namecards", testNamecardsQueryDeleteAll)
	t.Run("Privileges", testPrivilegesQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("RolesPrivileges", testRolesPrivilegesQueryDeleteAll)
	t.Run("RolesUsers", testRolesUsersQueryDeleteAll)
	t.Run("Scopes", testScopesQueryDeleteAll)
	t.Run("Tokens", testTokensQueryDeleteAll)
	t.Run("TokensScopes", testTokensScopesQueryDeleteAll)
	t.Run("UserLinks", testUserLinksQueryDeleteAll)
	t.Run("UserStatuses", testUserStatusesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsSliceDeleteAll)
	t.Run("Clients", testClientsSliceDeleteAll)
	t.Run("Invitations", testInvitationsSliceDeleteAll)
	t.Run("MailLogs", testMailLogsSliceDeleteAll)
	t.Run("Mails", testMailsSliceDeleteAll)
	t.Run("Namecards", testNamecardsSliceDeleteAll)
	t.Run("Privileges", testPrivilegesSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("RolesPrivileges", testRolesPrivilegesSliceDeleteAll)
	t.Run("RolesUsers", testRolesUsersSliceDeleteAll)
	t.Run("Scopes", testScopesSliceDeleteAll)
	t.Run("Tokens", testTokensSliceDeleteAll)
	t.Run("TokensScopes", testTokensScopesSliceDeleteAll)
	t.Run("UserLinks", testUserLinksSliceDeleteAll)
	t.Run("UserStatuses", testUserStatusesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsExists)
	t.Run("Clients", testClientsExists)
	t.Run("Invitations", testInvitationsExists)
	t.Run("MailLogs", testMailLogsExists)
	t.Run("Mails", testMailsExists)
	t.Run("Namecards", testNamecardsExists)
	t.Run("Privileges", testPrivilegesExists)
	t.Run("Roles", testRolesExists)
	t.Run("RolesPrivileges", testRolesPrivilegesExists)
	t.Run("RolesUsers", testRolesUsersExists)
	t.Run("Scopes", testScopesExists)
	t.Run("Tokens", testTokensExists)
	t.Run("TokensScopes", testTokensScopesExists)
	t.Run("UserLinks", testUserLinksExists)
	t.Run("UserStatuses", testUserStatusesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsFind)
	t.Run("Clients", testClientsFind)
	t.Run("Invitations", testInvitationsFind)
	t.Run("MailLogs", testMailLogsFind)
	t.Run("Mails", testMailsFind)
	t.Run("Namecards", testNamecardsFind)
	t.Run("Privileges", testPrivilegesFind)
	t.Run("Roles", testRolesFind)
	t.Run("RolesPrivileges", testRolesPrivilegesFind)
	t.Run("RolesUsers", testRolesUsersFind)
	t.Run("Scopes", testScopesFind)
	t.Run("Tokens", testTokensFind)
	t.Run("TokensScopes", testTokensScopesFind)
	t.Run("UserLinks", testUserLinksFind)
	t.Run("UserStatuses", testUserStatusesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsBind)
	t.Run("Clients", testClientsBind)
	t.Run("Invitations", testInvitationsBind)
	t.Run("MailLogs", testMailLogsBind)
	t.Run("Mails", testMailsBind)
	t.Run("Namecards", testNamecardsBind)
	t.Run("Privileges", testPrivilegesBind)
	t.Run("Roles", testRolesBind)
	t.Run("RolesPrivileges", testRolesPrivilegesBind)
	t.Run("RolesUsers", testRolesUsersBind)
	t.Run("Scopes", testScopesBind)
	t.Run("Tokens", testTokensBind)
	t.Run("TokensScopes", testTokensScopesBind)
	t.Run("UserLinks", testUserLinksBind)
	t.Run("UserStatuses", testUserStatusesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsOne)
	t.Run("Clients", testClientsOne)
	t.Run("Invitations", testInvitationsOne)
	t.Run("MailLogs", testMailLogsOne)
	t.Run("Mails", testMailsOne)
	t.Run("Namecards", testNamecardsOne)
	t.Run("Privileges", testPrivilegesOne)
	t.Run("Roles", testRolesOne)
	t.Run("RolesPrivileges", testRolesPrivilegesOne)
	t.Run("RolesUsers", testRolesUsersOne)
	t.Run("Scopes", testScopesOne)
	t.Run("Tokens", testTokensOne)
	t.Run("TokensScopes", testTokensScopesOne)
	t.Run("UserLinks", testUserLinksOne)
	t.Run("UserStatuses", testUserStatusesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsAll)
	t.Run("Clients", testClientsAll)
	t.Run("Invitations", testInvitationsAll)
	t.Run("MailLogs", testMailLogsAll)
	t.Run("Mails", testMailsAll)
	t.Run("Namecards", testNamecardsAll)
	t.Run("Privileges", testPrivilegesAll)
	t.Run("Roles", testRolesAll)
	t.Run("RolesPrivileges", testRolesPrivilegesAll)
	t.Run("RolesUsers", testRolesUsersAll)
	t.Run("Scopes", testScopesAll)
	t.Run("Tokens", testTokensAll)
	t.Run("TokensScopes", testTokensScopesAll)
	t.Run("UserLinks", testUserLinksAll)
	t.Run("UserStatuses", testUserStatusesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsCount)
	t.Run("Clients", testClientsCount)
	t.Run("Invitations", testInvitationsCount)
	t.Run("MailLogs", testMailLogsCount)
	t.Run("Mails", testMailsCount)
	t.Run("Namecards", testNamecardsCount)
	t.Run("Privileges", testPrivilegesCount)
	t.Run("Roles", testRolesCount)
	t.Run("RolesPrivileges", testRolesPrivilegesCount)
	t.Run("RolesUsers", testRolesUsersCount)
	t.Run("Scopes", testScopesCount)
	t.Run("Tokens", testTokensCount)
	t.Run("TokensScopes", testTokensScopesCount)
	t.Run("UserLinks", testUserLinksCount)
	t.Run("UserStatuses", testUserStatusesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsHooks)
	t.Run("Clients", testClientsHooks)
	t.Run("Invitations", testInvitationsHooks)
	t.Run("MailLogs", testMailLogsHooks)
	t.Run("Mails", testMailsHooks)
	t.Run("Namecards", testNamecardsHooks)
	t.Run("Privileges", testPrivilegesHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("RolesPrivileges", testRolesPrivilegesHooks)
	t.Run("RolesUsers", testRolesUsersHooks)
	t.Run("Scopes", testScopesHooks)
	t.Run("Tokens", testTokensHooks)
	t.Run("TokensScopes", testTokensScopesHooks)
	t.Run("UserLinks", testUserLinksHooks)
	t.Run("UserStatuses", testUserStatusesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsInsert)
	t.Run("ClientRedirectUrls", testClientRedirectUrlsInsertWhitelist)
	t.Run("Clients", testClientsInsert)
	t.Run("Clients", testClientsInsertWhitelist)
	t.Run("Invitations", testInvitationsInsert)
	t.Run("Invitations", testInvitationsInsertWhitelist)
	t.Run("MailLogs", testMailLogsInsert)
	t.Run("MailLogs", testMailLogsInsertWhitelist)
	t.Run("Mails", testMailsInsert)
	t.Run("Mails", testMailsInsertWhitelist)
	t.Run("Namecards", testNamecardsInsert)
	t.Run("Namecards", testNamecardsInsertWhitelist)
	t.Run("Privileges", testPrivilegesInsert)
	t.Run("Privileges", testPrivilegesInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("RolesPrivileges", testRolesPrivilegesInsert)
	t.Run("RolesPrivileges", testRolesPrivilegesInsertWhitelist)
	t.Run("RolesUsers", testRolesUsersInsert)
	t.Run("RolesUsers", testRolesUsersInsertWhitelist)
	t.Run("Scopes", testScopesInsert)
	t.Run("Scopes", testScopesInsertWhitelist)
	t.Run("Tokens", testTokensInsert)
	t.Run("Tokens", testTokensInsertWhitelist)
	t.Run("TokensScopes", testTokensScopesInsert)
	t.Run("TokensScopes", testTokensScopesInsertWhitelist)
	t.Run("UserLinks", testUserLinksInsert)
	t.Run("UserLinks", testUserLinksInsertWhitelist)
	t.Run("UserStatuses", testUserStatusesInsert)
	t.Run("UserStatuses", testUserStatusesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsReload)
	t.Run("Clients", testClientsReload)
	t.Run("Invitations", testInvitationsReload)
	t.Run("MailLogs", testMailLogsReload)
	t.Run("Mails", testMailsReload)
	t.Run("Namecards", testNamecardsReload)
	t.Run("Privileges", testPrivilegesReload)
	t.Run("Roles", testRolesReload)
	t.Run("RolesPrivileges", testRolesPrivilegesReload)
	t.Run("RolesUsers", testRolesUsersReload)
	t.Run("Scopes", testScopesReload)
	t.Run("Tokens", testTokensReload)
	t.Run("TokensScopes", testTokensScopesReload)
	t.Run("UserLinks", testUserLinksReload)
	t.Run("UserStatuses", testUserStatusesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsReloadAll)
	t.Run("Clients", testClientsReloadAll)
	t.Run("Invitations", testInvitationsReloadAll)
	t.Run("MailLogs", testMailLogsReloadAll)
	t.Run("Mails", testMailsReloadAll)
	t.Run("Namecards", testNamecardsReloadAll)
	t.Run("Privileges", testPrivilegesReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("RolesPrivileges", testRolesPrivilegesReloadAll)
	t.Run("RolesUsers", testRolesUsersReloadAll)
	t.Run("Scopes", testScopesReloadAll)
	t.Run("Tokens", testTokensReloadAll)
	t.Run("TokensScopes", testTokensScopesReloadAll)
	t.Run("UserLinks", testUserLinksReloadAll)
	t.Run("UserStatuses", testUserStatusesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsSelect)
	t.Run("Clients", testClientsSelect)
	t.Run("Invitations", testInvitationsSelect)
	t.Run("MailLogs", testMailLogsSelect)
	t.Run("Mails", testMailsSelect)
	t.Run("Namecards", testNamecardsSelect)
	t.Run("Privileges", testPrivilegesSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("RolesPrivileges", testRolesPrivilegesSelect)
	t.Run("RolesUsers", testRolesUsersSelect)
	t.Run("Scopes", testScopesSelect)
	t.Run("Tokens", testTokensSelect)
	t.Run("TokensScopes", testTokensScopesSelect)
	t.Run("UserLinks", testUserLinksSelect)
	t.Run("UserStatuses", testUserStatusesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsUpdate)
	t.Run("Clients", testClientsUpdate)
	t.Run("Invitations", testInvitationsUpdate)
	t.Run("MailLogs", testMailLogsUpdate)
	t.Run("Mails", testMailsUpdate)
	t.Run("Namecards", testNamecardsUpdate)
	t.Run("Privileges", testPrivilegesUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("RolesPrivileges", testRolesPrivilegesUpdate)
	t.Run("RolesUsers", testRolesUsersUpdate)
	t.Run("Scopes", testScopesUpdate)
	t.Run("Tokens", testTokensUpdate)
	t.Run("TokensScopes", testTokensScopesUpdate)
	t.Run("UserLinks", testUserLinksUpdate)
	t.Run("UserStatuses", testUserStatusesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ClientRedirectUrls", testClientRedirectUrlsSliceUpdateAll)
	t.Run("Clients", testClientsSliceUpdateAll)
	t.Run("Invitations", testInvitationsSliceUpdateAll)
	t.Run("MailLogs", testMailLogsSliceUpdateAll)
	t.Run("Mails", testMailsSliceUpdateAll)
	t.Run("Namecards", testNamecardsSliceUpdateAll)
	t.Run("Privileges", testPrivilegesSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("RolesPrivileges", testRolesPrivilegesSliceUpdateAll)
	t.Run("RolesUsers", testRolesUsersSliceUpdateAll)
	t.Run("Scopes", testScopesSliceUpdateAll)
	t.Run("Tokens", testTokensSliceUpdateAll)
	t.Run("TokensScopes", testTokensScopesSliceUpdateAll)
	t.Run("UserLinks", testUserLinksSliceUpdateAll)
	t.Run("UserStatuses", testUserStatusesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
