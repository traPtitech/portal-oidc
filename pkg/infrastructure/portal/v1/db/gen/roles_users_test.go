// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRolesUsers(t *testing.T) {
	t.Parallel()

	query := RolesUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRolesUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRolesUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RolesUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRolesUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RolesUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRolesUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RolesUserExists(ctx, tx, o.UserID, o.RoleID)
	if err != nil {
		t.Errorf("Unable to check if RolesUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RolesUserExists to return true, but got false.")
	}
}

func testRolesUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rolesUserFound, err := FindRolesUser(ctx, tx, o.UserID, o.RoleID)
	if err != nil {
		t.Error(err)
	}

	if rolesUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRolesUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RolesUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRolesUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RolesUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRolesUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rolesUserOne := &RolesUser{}
	rolesUserTwo := &RolesUser{}
	if err = randomize.Struct(seed, rolesUserOne, rolesUserDBTypes, false, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}
	if err = randomize.Struct(seed, rolesUserTwo, rolesUserDBTypes, false, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rolesUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rolesUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RolesUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRolesUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rolesUserOne := &RolesUser{}
	rolesUserTwo := &RolesUser{}
	if err = randomize.Struct(seed, rolesUserOne, rolesUserDBTypes, false, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}
	if err = randomize.Struct(seed, rolesUserTwo, rolesUserDBTypes, false, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rolesUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rolesUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rolesUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func rolesUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RolesUser) error {
	*o = RolesUser{}
	return nil
}

func testRolesUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RolesUser{}
	o := &RolesUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rolesUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RolesUser object: %s", err)
	}

	AddRolesUserHook(boil.BeforeInsertHook, rolesUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rolesUserBeforeInsertHooks = []RolesUserHook{}

	AddRolesUserHook(boil.AfterInsertHook, rolesUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rolesUserAfterInsertHooks = []RolesUserHook{}

	AddRolesUserHook(boil.AfterSelectHook, rolesUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rolesUserAfterSelectHooks = []RolesUserHook{}

	AddRolesUserHook(boil.BeforeUpdateHook, rolesUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rolesUserBeforeUpdateHooks = []RolesUserHook{}

	AddRolesUserHook(boil.AfterUpdateHook, rolesUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rolesUserAfterUpdateHooks = []RolesUserHook{}

	AddRolesUserHook(boil.BeforeDeleteHook, rolesUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rolesUserBeforeDeleteHooks = []RolesUserHook{}

	AddRolesUserHook(boil.AfterDeleteHook, rolesUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rolesUserAfterDeleteHooks = []RolesUserHook{}

	AddRolesUserHook(boil.BeforeUpsertHook, rolesUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rolesUserBeforeUpsertHooks = []RolesUserHook{}

	AddRolesUserHook(boil.AfterUpsertHook, rolesUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rolesUserAfterUpsertHooks = []RolesUserHook{}
}

func testRolesUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRolesUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rolesUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRolesUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRolesUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RolesUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRolesUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RolesUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rolesUserDBTypes = map[string]string{`UserID`: `varchar`, `RoleID`: `varchar`}
	_                = bytes.MinRead
)

func testRolesUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rolesUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rolesUserAllColumns) == len(rolesUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRolesUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rolesUserAllColumns) == len(rolesUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RolesUser{}
	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rolesUserDBTypes, true, rolesUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rolesUserAllColumns, rolesUserPrimaryKeyColumns) {
		fields = rolesUserAllColumns
	} else {
		fields = strmangle.SetComplement(
			rolesUserAllColumns,
			rolesUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RolesUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRolesUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(rolesUserAllColumns) == len(rolesUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRolesUserUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RolesUser{}
	if err = randomize.Struct(seed, &o, rolesUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RolesUser: %s", err)
	}

	count, err := RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rolesUserDBTypes, false, rolesUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RolesUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RolesUser: %s", err)
	}

	count, err = RolesUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
