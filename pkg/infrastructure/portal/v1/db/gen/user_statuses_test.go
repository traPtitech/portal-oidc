// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserStatuses(t *testing.T) {
	t.Parallel()

	query := UserStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserStatusExists(ctx, tx, o.UserID, o.Status)
	if err != nil {
		t.Errorf("Unable to check if UserStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserStatusExists to return true, but got false.")
	}
}

func testUserStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userStatusFound, err := FindUserStatus(ctx, tx, o.UserID, o.Status)
	if err != nil {
		t.Error(err)
	}

	if userStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userStatusOne := &UserStatus{}
	userStatusTwo := &UserStatus{}
	if err = randomize.Struct(seed, userStatusOne, userStatusDBTypes, false, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, userStatusTwo, userStatusDBTypes, false, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userStatusOne := &UserStatus{}
	userStatusTwo := &UserStatus{}
	if err = randomize.Struct(seed, userStatusOne, userStatusDBTypes, false, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, userStatusTwo, userStatusDBTypes, false, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userStatusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func userStatusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStatus) error {
	*o = UserStatus{}
	return nil
}

func testUserStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserStatus{}
	o := &UserStatus{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserStatus object: %s", err)
	}

	AddUserStatusHook(boil.BeforeInsertHook, userStatusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userStatusBeforeInsertHooks = []UserStatusHook{}

	AddUserStatusHook(boil.AfterInsertHook, userStatusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userStatusAfterInsertHooks = []UserStatusHook{}

	AddUserStatusHook(boil.AfterSelectHook, userStatusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userStatusAfterSelectHooks = []UserStatusHook{}

	AddUserStatusHook(boil.BeforeUpdateHook, userStatusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userStatusBeforeUpdateHooks = []UserStatusHook{}

	AddUserStatusHook(boil.AfterUpdateHook, userStatusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userStatusAfterUpdateHooks = []UserStatusHook{}

	AddUserStatusHook(boil.BeforeDeleteHook, userStatusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userStatusBeforeDeleteHooks = []UserStatusHook{}

	AddUserStatusHook(boil.AfterDeleteHook, userStatusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userStatusAfterDeleteHooks = []UserStatusHook{}

	AddUserStatusHook(boil.BeforeUpsertHook, userStatusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userStatusBeforeUpsertHooks = []UserStatusHook{}

	AddUserStatusHook(boil.AfterUpsertHook, userStatusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userStatusAfterUpsertHooks = []UserStatusHook{}
}

func testUserStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userStatusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userStatusDBTypes = map[string]string{`UserID`: `varchar`, `Status`: `varchar`, `Detail`: `varchar`}
	_                 = bytes.MinRead
)

func testUserStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userStatusAllColumns) == len(userStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userStatusAllColumns) == len(userStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserStatus{}
	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userStatusDBTypes, true, userStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userStatusAllColumns, userStatusPrimaryKeyColumns) {
		fields = userStatusAllColumns
	} else {
		fields = strmangle.SetComplement(
			userStatusAllColumns,
			userStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(userStatusAllColumns) == len(userStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserStatusUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserStatus{}
	if err = randomize.Struct(seed, &o, userStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserStatus: %s", err)
	}

	count, err := UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userStatusDBTypes, false, userStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserStatus: %s", err)
	}

	count, err = UserStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
