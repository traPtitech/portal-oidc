// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserLinks(t *testing.T) {
	t.Parallel()

	query := UserLinks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserLinks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserLinkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserLinkExists(ctx, tx, o.UserID, o.Service)
	if err != nil {
		t.Errorf("Unable to check if UserLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserLinkExists to return true, but got false.")
	}
}

func testUserLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userLinkFound, err := FindUserLink(ctx, tx, o.UserID, o.Service)
	if err != nil {
		t.Error(err)
	}

	if userLinkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserLinks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserLinks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLinkOne := &UserLink{}
	userLinkTwo := &UserLink{}
	if err = randomize.Struct(seed, userLinkOne, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkTwo, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userLinkOne := &UserLink{}
	userLinkTwo := &UserLink{}
	if err = randomize.Struct(seed, userLinkOne, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkTwo, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userLinkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func testUserLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserLink{}
	o := &UserLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserLink object: %s", err)
	}

	AddUserLinkHook(boil.BeforeInsertHook, userLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeInsertHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterInsertHook, userLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userLinkAfterInsertHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterSelectHook, userLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userLinkAfterSelectHooks = []UserLinkHook{}

	AddUserLinkHook(boil.BeforeUpdateHook, userLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeUpdateHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterUpdateHook, userLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userLinkAfterUpdateHooks = []UserLinkHook{}

	AddUserLinkHook(boil.BeforeDeleteHook, userLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeDeleteHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterDeleteHook, userLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userLinkAfterDeleteHooks = []UserLinkHook{}

	AddUserLinkHook(boil.BeforeUpsertHook, userLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeUpsertHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterUpsertHook, userLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userLinkAfterUpsertHooks = []UserLinkHook{}
}

func testUserLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userLinkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserLinkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userLinkDBTypes = map[string]string{`UserID`: `varchar`, `Service`: `varchar`, `Account`: `varchar`}
	_               = bytes.MinRead
)

func testUserLinksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userLinkAllColumns) == len(userLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userLinkAllColumns) == len(userLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserLink{}
	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userLinkDBTypes, true, userLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userLinkAllColumns, userLinkPrimaryKeyColumns) {
		fields = userLinkAllColumns
	} else {
		fields = strmangle.SetComplement(
			userLinkAllColumns,
			userLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserLinkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserLinksUpsert(t *testing.T) {
	t.Parallel()

	if len(userLinkAllColumns) == len(userLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserLinkUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserLink{}
	if err = randomize.Struct(seed, &o, userLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserLink: %s", err)
	}

	count, err := UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userLinkDBTypes, false, userLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserLink: %s", err)
	}

	count, err = UserLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
