// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MailLog is an object representing the database table.
type MailLog struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	MailID    null.String `boil:"mail_id" json:"mail_id,omitempty" toml:"mail_id" yaml:"mail_id,omitempty"`
	Status    null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Error     null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *mailLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mailLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MailLogColumns = struct {
	ID        string
	MailID    string
	Status    string
	Error     string
	CreatedAt string
}{
	ID:        "id",
	MailID:    "mail_id",
	Status:    "status",
	Error:     "error",
	CreatedAt: "created_at",
}

var MailLogTableColumns = struct {
	ID        string
	MailID    string
	Status    string
	Error     string
	CreatedAt string
}{
	ID:        "mail_logs.id",
	MailID:    "mail_logs.mail_id",
	Status:    "mail_logs.status",
	Error:     "mail_logs.error",
	CreatedAt: "mail_logs.created_at",
}

// Generated where

var MailLogWhere = struct {
	ID        whereHelperstring
	MailID    whereHelpernull_String
	Status    whereHelpernull_String
	Error     whereHelpernull_String
	CreatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "`mail_logs`.`id`"},
	MailID:    whereHelpernull_String{field: "`mail_logs`.`mail_id`"},
	Status:    whereHelpernull_String{field: "`mail_logs`.`status`"},
	Error:     whereHelpernull_String{field: "`mail_logs`.`error`"},
	CreatedAt: whereHelpernull_Time{field: "`mail_logs`.`created_at`"},
}

// MailLogRels is where relationship names are stored.
var MailLogRels = struct {
}{}

// mailLogR is where relationships are stored.
type mailLogR struct {
}

// NewStruct creates a new relationship struct
func (*mailLogR) NewStruct() *mailLogR {
	return &mailLogR{}
}

// mailLogL is where Load methods for each relationship are stored.
type mailLogL struct{}

var (
	mailLogAllColumns            = []string{"id", "mail_id", "status", "error", "created_at"}
	mailLogColumnsWithoutDefault = []string{"id", "mail_id", "status", "error", "created_at"}
	mailLogColumnsWithDefault    = []string{}
	mailLogPrimaryKeyColumns     = []string{"id"}
	mailLogGeneratedColumns      = []string{}
)

type (
	// MailLogSlice is an alias for a slice of pointers to MailLog.
	// This should almost always be used instead of []MailLog.
	MailLogSlice []*MailLog
	// MailLogHook is the signature for custom MailLog hook methods
	MailLogHook func(context.Context, boil.ContextExecutor, *MailLog) error

	mailLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mailLogType                 = reflect.TypeOf(&MailLog{})
	mailLogMapping              = queries.MakeStructMapping(mailLogType)
	mailLogPrimaryKeyMapping, _ = queries.BindMapping(mailLogType, mailLogMapping, mailLogPrimaryKeyColumns)
	mailLogInsertCacheMut       sync.RWMutex
	mailLogInsertCache          = make(map[string]insertCache)
	mailLogUpdateCacheMut       sync.RWMutex
	mailLogUpdateCache          = make(map[string]updateCache)
	mailLogUpsertCacheMut       sync.RWMutex
	mailLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mailLogAfterSelectMu sync.Mutex
var mailLogAfterSelectHooks []MailLogHook

var mailLogBeforeInsertMu sync.Mutex
var mailLogBeforeInsertHooks []MailLogHook
var mailLogAfterInsertMu sync.Mutex
var mailLogAfterInsertHooks []MailLogHook

var mailLogBeforeUpdateMu sync.Mutex
var mailLogBeforeUpdateHooks []MailLogHook
var mailLogAfterUpdateMu sync.Mutex
var mailLogAfterUpdateHooks []MailLogHook

var mailLogBeforeDeleteMu sync.Mutex
var mailLogBeforeDeleteHooks []MailLogHook
var mailLogAfterDeleteMu sync.Mutex
var mailLogAfterDeleteHooks []MailLogHook

var mailLogBeforeUpsertMu sync.Mutex
var mailLogBeforeUpsertHooks []MailLogHook
var mailLogAfterUpsertMu sync.Mutex
var mailLogAfterUpsertHooks []MailLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MailLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MailLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MailLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MailLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MailLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MailLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MailLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MailLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MailLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMailLogHook registers your hook function for all future operations.
func AddMailLogHook(hookPoint boil.HookPoint, mailLogHook MailLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mailLogAfterSelectMu.Lock()
		mailLogAfterSelectHooks = append(mailLogAfterSelectHooks, mailLogHook)
		mailLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mailLogBeforeInsertMu.Lock()
		mailLogBeforeInsertHooks = append(mailLogBeforeInsertHooks, mailLogHook)
		mailLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mailLogAfterInsertMu.Lock()
		mailLogAfterInsertHooks = append(mailLogAfterInsertHooks, mailLogHook)
		mailLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mailLogBeforeUpdateMu.Lock()
		mailLogBeforeUpdateHooks = append(mailLogBeforeUpdateHooks, mailLogHook)
		mailLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mailLogAfterUpdateMu.Lock()
		mailLogAfterUpdateHooks = append(mailLogAfterUpdateHooks, mailLogHook)
		mailLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mailLogBeforeDeleteMu.Lock()
		mailLogBeforeDeleteHooks = append(mailLogBeforeDeleteHooks, mailLogHook)
		mailLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mailLogAfterDeleteMu.Lock()
		mailLogAfterDeleteHooks = append(mailLogAfterDeleteHooks, mailLogHook)
		mailLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mailLogBeforeUpsertMu.Lock()
		mailLogBeforeUpsertHooks = append(mailLogBeforeUpsertHooks, mailLogHook)
		mailLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mailLogAfterUpsertMu.Lock()
		mailLogAfterUpsertHooks = append(mailLogAfterUpsertHooks, mailLogHook)
		mailLogAfterUpsertMu.Unlock()
	}
}

// One returns a single mailLog record from the query.
func (q mailLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MailLog, error) {
	o := &MailLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mail_logs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MailLog records from the query.
func (q mailLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (MailLogSlice, error) {
	var o []*MailLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MailLog slice")
	}

	if len(mailLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MailLog records in the query.
func (q mailLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mail_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mailLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mail_logs exists")
	}

	return count > 0, nil
}

// MailLogs retrieves all the records using an executor.
func MailLogs(mods ...qm.QueryMod) mailLogQuery {
	mods = append(mods, qm.From("`mail_logs`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`mail_logs`.*"})
	}

	return mailLogQuery{q}
}

// FindMailLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMailLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MailLog, error) {
	mailLogObj := &MailLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `mail_logs` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mailLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mail_logs")
	}

	if err = mailLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mailLogObj, err
	}

	return mailLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MailLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mail_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mailLogInsertCacheMut.RLock()
	cache, cached := mailLogInsertCache[key]
	mailLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mailLogAllColumns,
			mailLogColumnsWithDefault,
			mailLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mailLogType, mailLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mailLogType, mailLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `mail_logs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `mail_logs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `mail_logs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mailLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mail_logs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for mail_logs")
	}

CacheNoHooks:
	if !cached {
		mailLogInsertCacheMut.Lock()
		mailLogInsertCache[key] = cache
		mailLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MailLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MailLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mailLogUpdateCacheMut.RLock()
	cache, cached := mailLogUpdateCache[key]
	mailLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mailLogAllColumns,
			mailLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mail_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `mail_logs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mailLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mailLogType, mailLogMapping, append(wl, mailLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mail_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mail_logs")
	}

	if !cached {
		mailLogUpdateCacheMut.Lock()
		mailLogUpdateCache[key] = cache
		mailLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mailLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mail_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mail_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MailLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `mail_logs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mailLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mailLog")
	}
	return rowsAff, nil
}

var mySQLMailLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MailLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mail_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMailLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mailLogUpsertCacheMut.RLock()
	cache, cached := mailLogUpsertCache[key]
	mailLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mailLogAllColumns,
			mailLogColumnsWithDefault,
			mailLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mailLogAllColumns,
			mailLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert mail_logs, could not build update column list")
		}

		ret := strmangle.SetComplement(mailLogAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`mail_logs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `mail_logs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mailLogType, mailLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mailLogType, mailLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for mail_logs")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mailLogType, mailLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for mail_logs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for mail_logs")
	}

CacheNoHooks:
	if !cached {
		mailLogUpsertCacheMut.Lock()
		mailLogUpsertCache[key] = cache
		mailLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MailLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MailLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MailLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mailLogPrimaryKeyMapping)
	sql := "DELETE FROM `mail_logs` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mail_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mail_logs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mailLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mailLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mail_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mail_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MailLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mailLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `mail_logs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mailLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mail_logs")
	}

	if len(mailLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MailLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMailLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MailLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MailLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `mail_logs`.* FROM `mail_logs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MailLogSlice")
	}

	*o = slice

	return nil
}

// MailLogExists checks if the MailLog row exists.
func MailLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `mail_logs` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mail_logs exists")
	}

	return exists, nil
}

// Exists checks if the MailLog row exists.
func (o *MailLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MailLogExists(ctx, exec, o.ID)
}
