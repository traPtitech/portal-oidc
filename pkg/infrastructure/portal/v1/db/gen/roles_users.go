// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RolesUser is an object representing the database table.
type RolesUser struct {
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RoleID string `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`

	R *rolesUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rolesUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RolesUserColumns = struct {
	UserID string
	RoleID string
}{
	UserID: "user_id",
	RoleID: "role_id",
}

var RolesUserTableColumns = struct {
	UserID string
	RoleID string
}{
	UserID: "roles_users.user_id",
	RoleID: "roles_users.role_id",
}

// Generated where

var RolesUserWhere = struct {
	UserID whereHelperstring
	RoleID whereHelperstring
}{
	UserID: whereHelperstring{field: "`roles_users`.`user_id`"},
	RoleID: whereHelperstring{field: "`roles_users`.`role_id`"},
}

// RolesUserRels is where relationship names are stored.
var RolesUserRels = struct {
}{}

// rolesUserR is where relationships are stored.
type rolesUserR struct {
}

// NewStruct creates a new relationship struct
func (*rolesUserR) NewStruct() *rolesUserR {
	return &rolesUserR{}
}

// rolesUserL is where Load methods for each relationship are stored.
type rolesUserL struct{}

var (
	rolesUserAllColumns            = []string{"user_id", "role_id"}
	rolesUserColumnsWithoutDefault = []string{"user_id", "role_id"}
	rolesUserColumnsWithDefault    = []string{}
	rolesUserPrimaryKeyColumns     = []string{"user_id", "role_id"}
	rolesUserGeneratedColumns      = []string{}
)

type (
	// RolesUserSlice is an alias for a slice of pointers to RolesUser.
	// This should almost always be used instead of []RolesUser.
	RolesUserSlice []*RolesUser
	// RolesUserHook is the signature for custom RolesUser hook methods
	RolesUserHook func(context.Context, boil.ContextExecutor, *RolesUser) error

	rolesUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rolesUserType                 = reflect.TypeOf(&RolesUser{})
	rolesUserMapping              = queries.MakeStructMapping(rolesUserType)
	rolesUserPrimaryKeyMapping, _ = queries.BindMapping(rolesUserType, rolesUserMapping, rolesUserPrimaryKeyColumns)
	rolesUserInsertCacheMut       sync.RWMutex
	rolesUserInsertCache          = make(map[string]insertCache)
	rolesUserUpdateCacheMut       sync.RWMutex
	rolesUserUpdateCache          = make(map[string]updateCache)
	rolesUserUpsertCacheMut       sync.RWMutex
	rolesUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rolesUserAfterSelectMu sync.Mutex
var rolesUserAfterSelectHooks []RolesUserHook

var rolesUserBeforeInsertMu sync.Mutex
var rolesUserBeforeInsertHooks []RolesUserHook
var rolesUserAfterInsertMu sync.Mutex
var rolesUserAfterInsertHooks []RolesUserHook

var rolesUserBeforeUpdateMu sync.Mutex
var rolesUserBeforeUpdateHooks []RolesUserHook
var rolesUserAfterUpdateMu sync.Mutex
var rolesUserAfterUpdateHooks []RolesUserHook

var rolesUserBeforeDeleteMu sync.Mutex
var rolesUserBeforeDeleteHooks []RolesUserHook
var rolesUserAfterDeleteMu sync.Mutex
var rolesUserAfterDeleteHooks []RolesUserHook

var rolesUserBeforeUpsertMu sync.Mutex
var rolesUserBeforeUpsertHooks []RolesUserHook
var rolesUserAfterUpsertMu sync.Mutex
var rolesUserAfterUpsertHooks []RolesUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RolesUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RolesUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RolesUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RolesUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RolesUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RolesUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RolesUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RolesUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RolesUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolesUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRolesUserHook registers your hook function for all future operations.
func AddRolesUserHook(hookPoint boil.HookPoint, rolesUserHook RolesUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		rolesUserAfterSelectMu.Lock()
		rolesUserAfterSelectHooks = append(rolesUserAfterSelectHooks, rolesUserHook)
		rolesUserAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		rolesUserBeforeInsertMu.Lock()
		rolesUserBeforeInsertHooks = append(rolesUserBeforeInsertHooks, rolesUserHook)
		rolesUserBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		rolesUserAfterInsertMu.Lock()
		rolesUserAfterInsertHooks = append(rolesUserAfterInsertHooks, rolesUserHook)
		rolesUserAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		rolesUserBeforeUpdateMu.Lock()
		rolesUserBeforeUpdateHooks = append(rolesUserBeforeUpdateHooks, rolesUserHook)
		rolesUserBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		rolesUserAfterUpdateMu.Lock()
		rolesUserAfterUpdateHooks = append(rolesUserAfterUpdateHooks, rolesUserHook)
		rolesUserAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		rolesUserBeforeDeleteMu.Lock()
		rolesUserBeforeDeleteHooks = append(rolesUserBeforeDeleteHooks, rolesUserHook)
		rolesUserBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		rolesUserAfterDeleteMu.Lock()
		rolesUserAfterDeleteHooks = append(rolesUserAfterDeleteHooks, rolesUserHook)
		rolesUserAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		rolesUserBeforeUpsertMu.Lock()
		rolesUserBeforeUpsertHooks = append(rolesUserBeforeUpsertHooks, rolesUserHook)
		rolesUserBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		rolesUserAfterUpsertMu.Lock()
		rolesUserAfterUpsertHooks = append(rolesUserAfterUpsertHooks, rolesUserHook)
		rolesUserAfterUpsertMu.Unlock()
	}
}

// One returns a single rolesUser record from the query.
func (q rolesUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RolesUser, error) {
	o := &RolesUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for roles_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RolesUser records from the query.
func (q rolesUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (RolesUserSlice, error) {
	var o []*RolesUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RolesUser slice")
	}

	if len(rolesUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RolesUser records in the query.
func (q rolesUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count roles_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rolesUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if roles_users exists")
	}

	return count > 0, nil
}

// RolesUsers retrieves all the records using an executor.
func RolesUsers(mods ...qm.QueryMod) rolesUserQuery {
	mods = append(mods, qm.From("`roles_users`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`roles_users`.*"})
	}

	return rolesUserQuery{q}
}

// FindRolesUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRolesUser(ctx context.Context, exec boil.ContextExecutor, userID string, roleID string, selectCols ...string) (*RolesUser, error) {
	rolesUserObj := &RolesUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `roles_users` where `user_id`=? AND `role_id`=?", sel,
	)

	q := queries.Raw(query, userID, roleID)

	err := q.Bind(ctx, exec, rolesUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from roles_users")
	}

	if err = rolesUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rolesUserObj, err
	}

	return rolesUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RolesUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no roles_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rolesUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rolesUserInsertCacheMut.RLock()
	cache, cached := rolesUserInsertCache[key]
	rolesUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rolesUserAllColumns,
			rolesUserColumnsWithDefault,
			rolesUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rolesUserType, rolesUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rolesUserType, rolesUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `roles_users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `roles_users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `roles_users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, rolesUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into roles_users")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.RoleID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for roles_users")
	}

CacheNoHooks:
	if !cached {
		rolesUserInsertCacheMut.Lock()
		rolesUserInsertCache[key] = cache
		rolesUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RolesUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RolesUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rolesUserUpdateCacheMut.RLock()
	cache, cached := rolesUserUpdateCache[key]
	rolesUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rolesUserAllColumns,
			rolesUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update roles_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `roles_users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, rolesUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rolesUserType, rolesUserMapping, append(wl, rolesUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update roles_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for roles_users")
	}

	if !cached {
		rolesUserUpdateCacheMut.Lock()
		rolesUserUpdateCache[key] = cache
		rolesUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rolesUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for roles_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for roles_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RolesUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolesUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `roles_users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rolesUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rolesUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rolesUser")
	}
	return rowsAff, nil
}

var mySQLRolesUserUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RolesUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no roles_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rolesUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRolesUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rolesUserUpsertCacheMut.RLock()
	cache, cached := rolesUserUpsertCache[key]
	rolesUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rolesUserAllColumns,
			rolesUserColumnsWithDefault,
			rolesUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rolesUserAllColumns,
			rolesUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert roles_users, could not build update column list")
		}

		ret := strmangle.SetComplement(rolesUserAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`roles_users`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `roles_users` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(rolesUserType, rolesUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rolesUserType, rolesUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for roles_users")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(rolesUserType, rolesUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for roles_users")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for roles_users")
	}

CacheNoHooks:
	if !cached {
		rolesUserUpsertCacheMut.Lock()
		rolesUserUpsertCache[key] = cache
		rolesUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RolesUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RolesUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RolesUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rolesUserPrimaryKeyMapping)
	sql := "DELETE FROM `roles_users` WHERE `user_id`=? AND `role_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from roles_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for roles_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rolesUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rolesUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roles_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for roles_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RolesUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rolesUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolesUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `roles_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rolesUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rolesUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for roles_users")
	}

	if len(rolesUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RolesUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRolesUser(ctx, exec, o.UserID, o.RoleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RolesUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RolesUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolesUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `roles_users`.* FROM `roles_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rolesUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RolesUserSlice")
	}

	*o = slice

	return nil
}

// RolesUserExists checks if the RolesUser row exists.
func RolesUserExists(ctx context.Context, exec boil.ContextExecutor, userID string, roleID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `roles_users` where `user_id`=? AND `role_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, roleID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, roleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if roles_users exists")
	}

	return exists, nil
}

// Exists checks if the RolesUser row exists.
func (o *RolesUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RolesUserExists(ctx, exec, o.UserID, o.RoleID)
}
