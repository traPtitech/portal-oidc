// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Mail is an object representing the database table.
type Mail struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	To         null.String `boil:"to" json:"to,omitempty" toml:"to" yaml:"to,omitempty"`
	Sub        null.String `boil:"sub" json:"sub,omitempty" toml:"sub" yaml:"sub,omitempty"`
	Main       null.String `boil:"main" json:"main,omitempty" toml:"main" yaml:"main,omitempty"`
	OperatorID null.String `boil:"operator_id" json:"operator_id,omitempty" toml:"operator_id" yaml:"operator_id,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *mailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MailColumns = struct {
	ID         string
	To         string
	Sub        string
	Main       string
	OperatorID string
	CreatedAt  string
}{
	ID:         "id",
	To:         "to",
	Sub:        "sub",
	Main:       "main",
	OperatorID: "operator_id",
	CreatedAt:  "created_at",
}

var MailTableColumns = struct {
	ID         string
	To         string
	Sub        string
	Main       string
	OperatorID string
	CreatedAt  string
}{
	ID:         "mails.id",
	To:         "mails.to",
	Sub:        "mails.sub",
	Main:       "mails.main",
	OperatorID: "mails.operator_id",
	CreatedAt:  "mails.created_at",
}

// Generated where

var MailWhere = struct {
	ID         whereHelperstring
	To         whereHelpernull_String
	Sub        whereHelpernull_String
	Main       whereHelpernull_String
	OperatorID whereHelpernull_String
	CreatedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "`mails`.`id`"},
	To:         whereHelpernull_String{field: "`mails`.`to`"},
	Sub:        whereHelpernull_String{field: "`mails`.`sub`"},
	Main:       whereHelpernull_String{field: "`mails`.`main`"},
	OperatorID: whereHelpernull_String{field: "`mails`.`operator_id`"},
	CreatedAt:  whereHelpernull_Time{field: "`mails`.`created_at`"},
}

// MailRels is where relationship names are stored.
var MailRels = struct {
}{}

// mailR is where relationships are stored.
type mailR struct {
}

// NewStruct creates a new relationship struct
func (*mailR) NewStruct() *mailR {
	return &mailR{}
}

// mailL is where Load methods for each relationship are stored.
type mailL struct{}

var (
	mailAllColumns            = []string{"id", "to", "sub", "main", "operator_id", "created_at"}
	mailColumnsWithoutDefault = []string{"id", "to", "sub", "main", "operator_id", "created_at"}
	mailColumnsWithDefault    = []string{}
	mailPrimaryKeyColumns     = []string{"id"}
	mailGeneratedColumns      = []string{}
)

type (
	// MailSlice is an alias for a slice of pointers to Mail.
	// This should almost always be used instead of []Mail.
	MailSlice []*Mail
	// MailHook is the signature for custom Mail hook methods
	MailHook func(context.Context, boil.ContextExecutor, *Mail) error

	mailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mailType                 = reflect.TypeOf(&Mail{})
	mailMapping              = queries.MakeStructMapping(mailType)
	mailPrimaryKeyMapping, _ = queries.BindMapping(mailType, mailMapping, mailPrimaryKeyColumns)
	mailInsertCacheMut       sync.RWMutex
	mailInsertCache          = make(map[string]insertCache)
	mailUpdateCacheMut       sync.RWMutex
	mailUpdateCache          = make(map[string]updateCache)
	mailUpsertCacheMut       sync.RWMutex
	mailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mailAfterSelectMu sync.Mutex
var mailAfterSelectHooks []MailHook

var mailBeforeInsertMu sync.Mutex
var mailBeforeInsertHooks []MailHook
var mailAfterInsertMu sync.Mutex
var mailAfterInsertHooks []MailHook

var mailBeforeUpdateMu sync.Mutex
var mailBeforeUpdateHooks []MailHook
var mailAfterUpdateMu sync.Mutex
var mailAfterUpdateHooks []MailHook

var mailBeforeDeleteMu sync.Mutex
var mailBeforeDeleteHooks []MailHook
var mailAfterDeleteMu sync.Mutex
var mailAfterDeleteHooks []MailHook

var mailBeforeUpsertMu sync.Mutex
var mailBeforeUpsertHooks []MailHook
var mailAfterUpsertMu sync.Mutex
var mailAfterUpsertHooks []MailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMailHook registers your hook function for all future operations.
func AddMailHook(hookPoint boil.HookPoint, mailHook MailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mailAfterSelectMu.Lock()
		mailAfterSelectHooks = append(mailAfterSelectHooks, mailHook)
		mailAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mailBeforeInsertMu.Lock()
		mailBeforeInsertHooks = append(mailBeforeInsertHooks, mailHook)
		mailBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mailAfterInsertMu.Lock()
		mailAfterInsertHooks = append(mailAfterInsertHooks, mailHook)
		mailAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mailBeforeUpdateMu.Lock()
		mailBeforeUpdateHooks = append(mailBeforeUpdateHooks, mailHook)
		mailBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mailAfterUpdateMu.Lock()
		mailAfterUpdateHooks = append(mailAfterUpdateHooks, mailHook)
		mailAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mailBeforeDeleteMu.Lock()
		mailBeforeDeleteHooks = append(mailBeforeDeleteHooks, mailHook)
		mailBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mailAfterDeleteMu.Lock()
		mailAfterDeleteHooks = append(mailAfterDeleteHooks, mailHook)
		mailAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mailBeforeUpsertMu.Lock()
		mailBeforeUpsertHooks = append(mailBeforeUpsertHooks, mailHook)
		mailBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mailAfterUpsertMu.Lock()
		mailAfterUpsertHooks = append(mailAfterUpsertHooks, mailHook)
		mailAfterUpsertMu.Unlock()
	}
}

// One returns a single mail record from the query.
func (q mailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Mail, error) {
	o := &Mail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mails")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mail records from the query.
func (q mailQuery) All(ctx context.Context, exec boil.ContextExecutor) (MailSlice, error) {
	var o []*Mail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Mail slice")
	}

	if len(mailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mail records in the query.
func (q mailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mails rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mails exists")
	}

	return count > 0, nil
}

// Mails retrieves all the records using an executor.
func Mails(mods ...qm.QueryMod) mailQuery {
	mods = append(mods, qm.From("`mails`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`mails`.*"})
	}

	return mailQuery{q}
}

// FindMail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMail(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Mail, error) {
	mailObj := &Mail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `mails` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mails")
	}

	if err = mailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mailObj, err
	}

	return mailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mails provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mailInsertCacheMut.RLock()
	cache, cached := mailInsertCache[key]
	mailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mailAllColumns,
			mailColumnsWithDefault,
			mailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mailType, mailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mailType, mailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `mails` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `mails` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `mails` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mails")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for mails")
	}

CacheNoHooks:
	if !cached {
		mailInsertCacheMut.Lock()
		mailInsertCache[key] = cache
		mailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Mail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mailUpdateCacheMut.RLock()
	cache, cached := mailUpdateCache[key]
	mailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mailAllColumns,
			mailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mails, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `mails` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mailType, mailMapping, append(wl, mailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mails row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mails")
	}

	if !cached {
		mailUpdateCacheMut.Lock()
		mailUpdateCache[key] = cache
		mailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mails")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `mails` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mail")
	}
	return rowsAff, nil
}

var mySQLMailUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mails provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mailUpsertCacheMut.RLock()
	cache, cached := mailUpsertCache[key]
	mailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mailAllColumns,
			mailColumnsWithDefault,
			mailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mailAllColumns,
			mailPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert mails, could not build update column list")
		}

		ret := strmangle.SetComplement(mailAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`mails`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `mails` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mailType, mailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mailType, mailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for mails")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mailType, mailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for mails")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for mails")
	}

CacheNoHooks:
	if !cached {
		mailUpsertCacheMut.Lock()
		mailUpsertCache[key] = cache
		mailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Mail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mailPrimaryKeyMapping)
	sql := "DELETE FROM `mails` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mails")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `mails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mails")
	}

	if len(mailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `mails`.* FROM `mails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MailSlice")
	}

	*o = slice

	return nil
}

// MailExists checks if the Mail row exists.
func MailExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `mails` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mails exists")
	}

	return exists, nil
}

// Exists checks if the Mail row exists.
func (o *Mail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MailExists(ctx, exec, o.ID)
}
