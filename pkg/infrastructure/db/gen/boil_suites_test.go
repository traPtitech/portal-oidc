// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessions)
	t.Run("Clients", testClients)
	t.Run("RedirectUris", testRedirectUris)
}

func TestDelete(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsDelete)
	t.Run("Clients", testClientsDelete)
	t.Run("RedirectUris", testRedirectUrisDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsQueryDeleteAll)
	t.Run("Clients", testClientsQueryDeleteAll)
	t.Run("RedirectUris", testRedirectUrisQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsSliceDeleteAll)
	t.Run("Clients", testClientsSliceDeleteAll)
	t.Run("RedirectUris", testRedirectUrisSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsExists)
	t.Run("Clients", testClientsExists)
	t.Run("RedirectUris", testRedirectUrisExists)
}

func TestFind(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsFind)
	t.Run("Clients", testClientsFind)
	t.Run("RedirectUris", testRedirectUrisFind)
}

func TestBind(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsBind)
	t.Run("Clients", testClientsBind)
	t.Run("RedirectUris", testRedirectUrisBind)
}

func TestOne(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsOne)
	t.Run("Clients", testClientsOne)
	t.Run("RedirectUris", testRedirectUrisOne)
}

func TestAll(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsAll)
	t.Run("Clients", testClientsAll)
	t.Run("RedirectUris", testRedirectUrisAll)
}

func TestCount(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsCount)
	t.Run("Clients", testClientsCount)
	t.Run("RedirectUris", testRedirectUrisCount)
}

func TestHooks(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsHooks)
	t.Run("Clients", testClientsHooks)
	t.Run("RedirectUris", testRedirectUrisHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsInsert)
	t.Run("AuthorizationSessions", testAuthorizationSessionsInsertWhitelist)
	t.Run("Clients", testClientsInsert)
	t.Run("Clients", testClientsInsertWhitelist)
	t.Run("RedirectUris", testRedirectUrisInsert)
	t.Run("RedirectUris", testRedirectUrisInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("RedirectURIToClientUsingClient", testRedirectURIToOneClientUsingClient)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ClientToRedirectUris", testClientToManyRedirectUris)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("RedirectURIToClientUsingRedirectUris", testRedirectURIToOneSetOpClientUsingClient)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ClientToRedirectUris", testClientToManyAddOpRedirectUris)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsReload)
	t.Run("Clients", testClientsReload)
	t.Run("RedirectUris", testRedirectUrisReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsReloadAll)
	t.Run("Clients", testClientsReloadAll)
	t.Run("RedirectUris", testRedirectUrisReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsSelect)
	t.Run("Clients", testClientsSelect)
	t.Run("RedirectUris", testRedirectUrisSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsUpdate)
	t.Run("Clients", testClientsUpdate)
	t.Run("RedirectUris", testRedirectUrisUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AuthorizationSessions", testAuthorizationSessionsSliceUpdateAll)
	t.Run("Clients", testClientsSliceUpdateAll)
	t.Run("RedirectUris", testRedirectUrisSliceUpdateAll)
}
