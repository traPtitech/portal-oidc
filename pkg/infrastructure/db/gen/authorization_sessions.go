// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizationSession is an object representing the database table.
type AuthorizationSession struct {
	ID   string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type string `boil:"type" json:"type" toml:"type" yaml:"type"`
	// SHA384
	Signature         string    `boil:"signature" json:"signature" toml:"signature" yaml:"signature"`
	ClientID          string    `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	UserID            string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Scope             string    `boil:"scope" json:"scope" toml:"scope" yaml:"scope"`
	GrantedScope      string    `boil:"granted_scope" json:"granted_scope" toml:"granted_scope" yaml:"granted_scope"`
	FormData          string    `boil:"form_data" json:"form_data" toml:"form_data" yaml:"form_data"`
	Session           string    `boil:"session" json:"session" toml:"session" yaml:"session"`
	Active            bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	RequestedAudience string    `boil:"requested_audience" json:"requested_audience" toml:"requested_audience" yaml:"requested_audience"`
	GrantedAudience   string    `boil:"granted_audience" json:"granted_audience" toml:"granted_audience" yaml:"granted_audience"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *authorizationSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizationSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizationSessionColumns = struct {
	ID                string
	Type              string
	Signature         string
	ClientID          string
	UserID            string
	Scope             string
	GrantedScope      string
	FormData          string
	Session           string
	Active            string
	RequestedAudience string
	GrantedAudience   string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	Type:              "type",
	Signature:         "signature",
	ClientID:          "client_id",
	UserID:            "user_id",
	Scope:             "scope",
	GrantedScope:      "granted_scope",
	FormData:          "form_data",
	Session:           "session",
	Active:            "active",
	RequestedAudience: "requested_audience",
	GrantedAudience:   "granted_audience",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var AuthorizationSessionTableColumns = struct {
	ID                string
	Type              string
	Signature         string
	ClientID          string
	UserID            string
	Scope             string
	GrantedScope      string
	FormData          string
	Session           string
	Active            string
	RequestedAudience string
	GrantedAudience   string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "authorization_sessions.id",
	Type:              "authorization_sessions.type",
	Signature:         "authorization_sessions.signature",
	ClientID:          "authorization_sessions.client_id",
	UserID:            "authorization_sessions.user_id",
	Scope:             "authorization_sessions.scope",
	GrantedScope:      "authorization_sessions.granted_scope",
	FormData:          "authorization_sessions.form_data",
	Session:           "authorization_sessions.session",
	Active:            "authorization_sessions.active",
	RequestedAudience: "authorization_sessions.requested_audience",
	GrantedAudience:   "authorization_sessions.granted_audience",
	CreatedAt:         "authorization_sessions.created_at",
	UpdatedAt:         "authorization_sessions.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AuthorizationSessionWhere = struct {
	ID                whereHelperstring
	Type              whereHelperstring
	Signature         whereHelperstring
	ClientID          whereHelperstring
	UserID            whereHelperstring
	Scope             whereHelperstring
	GrantedScope      whereHelperstring
	FormData          whereHelperstring
	Session           whereHelperstring
	Active            whereHelperbool
	RequestedAudience whereHelperstring
	GrantedAudience   whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "`authorization_sessions`.`id`"},
	Type:              whereHelperstring{field: "`authorization_sessions`.`type`"},
	Signature:         whereHelperstring{field: "`authorization_sessions`.`signature`"},
	ClientID:          whereHelperstring{field: "`authorization_sessions`.`client_id`"},
	UserID:            whereHelperstring{field: "`authorization_sessions`.`user_id`"},
	Scope:             whereHelperstring{field: "`authorization_sessions`.`scope`"},
	GrantedScope:      whereHelperstring{field: "`authorization_sessions`.`granted_scope`"},
	FormData:          whereHelperstring{field: "`authorization_sessions`.`form_data`"},
	Session:           whereHelperstring{field: "`authorization_sessions`.`session`"},
	Active:            whereHelperbool{field: "`authorization_sessions`.`active`"},
	RequestedAudience: whereHelperstring{field: "`authorization_sessions`.`requested_audience`"},
	GrantedAudience:   whereHelperstring{field: "`authorization_sessions`.`granted_audience`"},
	CreatedAt:         whereHelpertime_Time{field: "`authorization_sessions`.`created_at`"},
	UpdatedAt:         whereHelpertime_Time{field: "`authorization_sessions`.`updated_at`"},
}

// AuthorizationSessionRels is where relationship names are stored.
var AuthorizationSessionRels = struct {
}{}

// authorizationSessionR is where relationships are stored.
type authorizationSessionR struct {
}

// NewStruct creates a new relationship struct
func (*authorizationSessionR) NewStruct() *authorizationSessionR {
	return &authorizationSessionR{}
}

// authorizationSessionL is where Load methods for each relationship are stored.
type authorizationSessionL struct{}

var (
	authorizationSessionAllColumns            = []string{"id", "type", "signature", "client_id", "user_id", "scope", "granted_scope", "form_data", "session", "active", "requested_audience", "granted_audience", "created_at", "updated_at"}
	authorizationSessionColumnsWithoutDefault = []string{"id", "type", "signature", "client_id", "user_id", "scope", "granted_scope", "form_data", "session", "requested_audience", "granted_audience"}
	authorizationSessionColumnsWithDefault    = []string{"active", "created_at", "updated_at"}
	authorizationSessionPrimaryKeyColumns     = []string{"id"}
	authorizationSessionGeneratedColumns      = []string{}
)

type (
	// AuthorizationSessionSlice is an alias for a slice of pointers to AuthorizationSession.
	// This should almost always be used instead of []AuthorizationSession.
	AuthorizationSessionSlice []*AuthorizationSession
	// AuthorizationSessionHook is the signature for custom AuthorizationSession hook methods
	AuthorizationSessionHook func(context.Context, boil.ContextExecutor, *AuthorizationSession) error

	authorizationSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizationSessionType                 = reflect.TypeOf(&AuthorizationSession{})
	authorizationSessionMapping              = queries.MakeStructMapping(authorizationSessionType)
	authorizationSessionPrimaryKeyMapping, _ = queries.BindMapping(authorizationSessionType, authorizationSessionMapping, authorizationSessionPrimaryKeyColumns)
	authorizationSessionInsertCacheMut       sync.RWMutex
	authorizationSessionInsertCache          = make(map[string]insertCache)
	authorizationSessionUpdateCacheMut       sync.RWMutex
	authorizationSessionUpdateCache          = make(map[string]updateCache)
	authorizationSessionUpsertCacheMut       sync.RWMutex
	authorizationSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizationSessionAfterSelectHooks []AuthorizationSessionHook

var authorizationSessionBeforeInsertHooks []AuthorizationSessionHook
var authorizationSessionAfterInsertHooks []AuthorizationSessionHook

var authorizationSessionBeforeUpdateHooks []AuthorizationSessionHook
var authorizationSessionAfterUpdateHooks []AuthorizationSessionHook

var authorizationSessionBeforeDeleteHooks []AuthorizationSessionHook
var authorizationSessionAfterDeleteHooks []AuthorizationSessionHook

var authorizationSessionBeforeUpsertHooks []AuthorizationSessionHook
var authorizationSessionAfterUpsertHooks []AuthorizationSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizationSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizationSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizationSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizationSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizationSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizationSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizationSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizationSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizationSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizationSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizationSessionHook registers your hook function for all future operations.
func AddAuthorizationSessionHook(hookPoint boil.HookPoint, authorizationSessionHook AuthorizationSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizationSessionAfterSelectHooks = append(authorizationSessionAfterSelectHooks, authorizationSessionHook)
	case boil.BeforeInsertHook:
		authorizationSessionBeforeInsertHooks = append(authorizationSessionBeforeInsertHooks, authorizationSessionHook)
	case boil.AfterInsertHook:
		authorizationSessionAfterInsertHooks = append(authorizationSessionAfterInsertHooks, authorizationSessionHook)
	case boil.BeforeUpdateHook:
		authorizationSessionBeforeUpdateHooks = append(authorizationSessionBeforeUpdateHooks, authorizationSessionHook)
	case boil.AfterUpdateHook:
		authorizationSessionAfterUpdateHooks = append(authorizationSessionAfterUpdateHooks, authorizationSessionHook)
	case boil.BeforeDeleteHook:
		authorizationSessionBeforeDeleteHooks = append(authorizationSessionBeforeDeleteHooks, authorizationSessionHook)
	case boil.AfterDeleteHook:
		authorizationSessionAfterDeleteHooks = append(authorizationSessionAfterDeleteHooks, authorizationSessionHook)
	case boil.BeforeUpsertHook:
		authorizationSessionBeforeUpsertHooks = append(authorizationSessionBeforeUpsertHooks, authorizationSessionHook)
	case boil.AfterUpsertHook:
		authorizationSessionAfterUpsertHooks = append(authorizationSessionAfterUpsertHooks, authorizationSessionHook)
	}
}

// One returns a single authorizationSession record from the query.
func (q authorizationSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizationSession, error) {
	o := &AuthorizationSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorization_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AuthorizationSession records from the query.
func (q authorizationSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizationSessionSlice, error) {
	var o []*AuthorizationSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizationSession slice")
	}

	if len(authorizationSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AuthorizationSession records in the query.
func (q authorizationSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorization_sessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authorizationSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorization_sessions exists")
	}

	return count > 0, nil
}

// AuthorizationSessions retrieves all the records using an executor.
func AuthorizationSessions(mods ...qm.QueryMod) authorizationSessionQuery {
	mods = append(mods, qm.From("`authorization_sessions`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`authorization_sessions`.*"})
	}

	return authorizationSessionQuery{q}
}

// FindAuthorizationSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizationSession(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizationSession, error) {
	authorizationSessionObj := &AuthorizationSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `authorization_sessions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizationSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorization_sessions")
	}

	if err = authorizationSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizationSessionObj, err
	}

	return authorizationSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizationSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorization_sessions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizationSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizationSessionInsertCacheMut.RLock()
	cache, cached := authorizationSessionInsertCache[key]
	authorizationSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizationSessionAllColumns,
			authorizationSessionColumnsWithDefault,
			authorizationSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizationSessionType, authorizationSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizationSessionType, authorizationSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `authorization_sessions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `authorization_sessions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `authorization_sessions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authorizationSessionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorization_sessions")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for authorization_sessions")
	}

CacheNoHooks:
	if !cached {
		authorizationSessionInsertCacheMut.Lock()
		authorizationSessionInsertCache[key] = cache
		authorizationSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AuthorizationSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizationSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizationSessionUpdateCacheMut.RLock()
	cache, cached := authorizationSessionUpdateCache[key]
	authorizationSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizationSessionAllColumns,
			authorizationSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorization_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `authorization_sessions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authorizationSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizationSessionType, authorizationSessionMapping, append(wl, authorizationSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorization_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorization_sessions")
	}

	if !cached {
		authorizationSessionUpdateCacheMut.Lock()
		authorizationSessionUpdateCache[key] = cache
		authorizationSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizationSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorization_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorization_sessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizationSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizationSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `authorization_sessions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authorizationSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizationSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizationSession")
	}
	return rowsAff, nil
}

var mySQLAuthorizationSessionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizationSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorization_sessions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizationSessionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAuthorizationSessionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizationSessionUpsertCacheMut.RLock()
	cache, cached := authorizationSessionUpsertCache[key]
	authorizationSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizationSessionAllColumns,
			authorizationSessionColumnsWithDefault,
			authorizationSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizationSessionAllColumns,
			authorizationSessionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert authorization_sessions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`authorization_sessions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `authorization_sessions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(authorizationSessionType, authorizationSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizationSessionType, authorizationSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for authorization_sessions")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(authorizationSessionType, authorizationSessionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for authorization_sessions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for authorization_sessions")
	}

CacheNoHooks:
	if !cached {
		authorizationSessionUpsertCacheMut.Lock()
		authorizationSessionUpsertCache[key] = cache
		authorizationSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AuthorizationSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizationSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizationSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizationSessionPrimaryKeyMapping)
	sql := "DELETE FROM `authorization_sessions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorization_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorization_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authorizationSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizationSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorization_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorization_sessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizationSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizationSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizationSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `authorization_sessions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authorizationSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizationSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorization_sessions")
	}

	if len(authorizationSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizationSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizationSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizationSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizationSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizationSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `authorization_sessions`.* FROM `authorization_sessions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authorizationSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizationSessionSlice")
	}

	*o = slice

	return nil
}

// AuthorizationSessionExists checks if the AuthorizationSession row exists.
func AuthorizationSessionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `authorization_sessions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorization_sessions exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizationSession row exists.
func (o *AuthorizationSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizationSessionExists(ctx, exec, o.ID)
}
