// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthorizationSessions(t *testing.T) {
	t.Parallel()

	query := AuthorizationSessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthorizationSessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorizationSessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthorizationSessions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorizationSessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorizationSessionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorizationSessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthorizationSessionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuthorizationSession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthorizationSessionExists to return true, but got false.")
	}
}

func testAuthorizationSessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authorizationSessionFound, err := FindAuthorizationSession(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if authorizationSessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthorizationSessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthorizationSessions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthorizationSessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthorizationSessions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthorizationSessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authorizationSessionOne := &AuthorizationSession{}
	authorizationSessionTwo := &AuthorizationSession{}
	if err = randomize.Struct(seed, authorizationSessionOne, authorizationSessionDBTypes, false, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}
	if err = randomize.Struct(seed, authorizationSessionTwo, authorizationSessionDBTypes, false, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authorizationSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorizationSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthorizationSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthorizationSessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorizationSessionOne := &AuthorizationSession{}
	authorizationSessionTwo := &AuthorizationSession{}
	if err = randomize.Struct(seed, authorizationSessionOne, authorizationSessionDBTypes, false, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}
	if err = randomize.Struct(seed, authorizationSessionTwo, authorizationSessionDBTypes, false, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authorizationSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorizationSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authorizationSessionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func authorizationSessionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthorizationSession) error {
	*o = AuthorizationSession{}
	return nil
}

func testAuthorizationSessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuthorizationSession{}
	o := &AuthorizationSession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession object: %s", err)
	}

	AddAuthorizationSessionHook(boil.BeforeInsertHook, authorizationSessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authorizationSessionBeforeInsertHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.AfterInsertHook, authorizationSessionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authorizationSessionAfterInsertHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.AfterSelectHook, authorizationSessionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authorizationSessionAfterSelectHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.BeforeUpdateHook, authorizationSessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authorizationSessionBeforeUpdateHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.AfterUpdateHook, authorizationSessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authorizationSessionAfterUpdateHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.BeforeDeleteHook, authorizationSessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authorizationSessionBeforeDeleteHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.AfterDeleteHook, authorizationSessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authorizationSessionAfterDeleteHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.BeforeUpsertHook, authorizationSessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authorizationSessionBeforeUpsertHooks = []AuthorizationSessionHook{}

	AddAuthorizationSessionHook(boil.AfterUpsertHook, authorizationSessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authorizationSessionAfterUpsertHooks = []AuthorizationSessionHook{}
}

func testAuthorizationSessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorizationSessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authorizationSessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorizationSessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthorizationSessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorizationSessionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthorizationSessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthorizationSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authorizationSessionDBTypes = map[string]string{`ID`: `char`, `Type`: `varchar`, `Signature`: `varchar`, `ClientID`: `char`, `UserID`: `varchar`, `Scope`: `text`, `GrantedScope`: `text`, `FormData`: `longtext`, `Session`: `longtext`, `Active`: `tinyint`, `RequestedAudience`: `text`, `GrantedAudience`: `text`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                           = bytes.MinRead
)

func testAuthorizationSessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authorizationSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authorizationSessionAllColumns) == len(authorizationSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthorizationSessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authorizationSessionAllColumns) == len(authorizationSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthorizationSession{}
	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorizationSessionDBTypes, true, authorizationSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authorizationSessionAllColumns, authorizationSessionPrimaryKeyColumns) {
		fields = authorizationSessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			authorizationSessionAllColumns,
			authorizationSessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthorizationSessionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthorizationSessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(authorizationSessionAllColumns) == len(authorizationSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAuthorizationSessionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthorizationSession{}
	if err = randomize.Struct(seed, &o, authorizationSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthorizationSession: %s", err)
	}

	count, err := AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authorizationSessionDBTypes, false, authorizationSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthorizationSession struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthorizationSession: %s", err)
	}

	count, err = AuthorizationSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
